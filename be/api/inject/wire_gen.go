// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"context"
	"github.com/urfave/cli/v3"
	"sn/api"
	"sn/api/rest"
	"sn/api/rest/handlers"
	"sn/api/rest/middleware"
	"sn/internal/repository/account"
	"sn/internal/repository/info"
	"sn/internal/service"
)

// Injectors from wire.go:

func InitializeApplication(c *cli.Command, appCtx context.Context) (api.Container, error) {
	client, err := providePostgresClient(appCtx, c)
	if err != nil {
		return api.Container{}, err
	}
	infoStore := info.NewInfoStore(client)
	accountStore := account.NewAccountStore(client)
	passwordServiceConfig, err := providePasswordServiceConfig(appCtx, c)
	if err != nil {
		return api.Container{}, err
	}
	passwordService := service.NewPasswordService(passwordServiceConfig)
	accountService := service.NewAccountService(infoStore, accountStore, passwordService)
	sessionServiceConfig, err := provideSessionServiceConfig(appCtx, c)
	if err != nil {
		return api.Container{}, err
	}
	tokenServiceConfig, err := provideJWTServiceConfig(appCtx, c)
	if err != nil {
		return api.Container{}, err
	}
	tokenService := service.NewTokenService(tokenServiceConfig)
	sessionService := service.NewSessionService(sessionServiceConfig, tokenService)
	authService := service.NewAuthService(infoStore, accountStore, passwordService, sessionService)
	resolver := handlers.NewResolver(accountService, authService)
	bearerTokenAuth := middleware.NewBearerTokenAuth(tokenService)
	serverConfig, err := provideRestServerConfig(appCtx, c)
	if err != nil {
		return api.Container{}, err
	}
	server := rest.NewServer(resolver, bearerTokenAuth, serverConfig)
	container := api.NewContainer(client, server)
	return container, nil
}
